(Uses the following global definitions:)
(#<_zsafe> - safe height)
(#<_feedxy> - xy feed rate)
(#<_feedz> - z feed rate)
(#<_toolr> - cutter radius)
(#<_cutdepth> - how much material to take off per pass)
(#<_stepover> - fraction of tool DIAMETER to clear each pass)

(In general, 0 is used to indicate X, while 1 is used for Y)


(#1 = width, x)
(#2 = height, y)
(#3 = center, x)
(#4 = center, y)
(#5 = top of workpiece)
(#6 = min z)
(#7 = finishing passes to do; 0 = none, otherwise count to be performed)
(#8 = coordmode:)
	(0, or anything else not covered below: width, height, centerX, centerY)
	(1: minX, minY, maxX, maxY)

o<rectpocket> sub
	#<coordmode> = #8
	
	(Default: width, height, centerX, centerY)
	#<w> = #1
	#<h> = #2
	#<cx> = #3
	#<cy> = #4
	#<worktop> = #5
	#<zlow> = #6
	
	(Allow for alternate coordinate modes)
	o<rectpocketcoordmode> if [#<coordmode> EQ 1] (minX, minY, maxX, maxY)
		#<minX> = #1
		#<minY> = #2
		#<maxX> = #3
		#<maxY> = #4
		
		#<w> = [#<maxX> - #<minX>]
		#<h> = [#<maxY> - #<minY>]
		#<cx> = [[#<maxX> + #<minX>]/2]
		#<cy> = [[#<maxY> + #<minY>]/2]
		
		#<worktop> = #5
		#<zlow> = #6
	o<rectpocketcoordmode> endif
	
	(How many finishing passes to do)
	#<tofinish> = #7
	
	(Finishing passes completed)
	#<finishdone> = 0

	
	(Furthest X and Y dimensions from center)
	#<halfX> = [#<w>/2 - #<_toolr>]
	#<halfY> = [#<h>/2 - #<_toolr>]
	
	(Because of how we iterate, we'll often end up starting an iteration)
	(in a different corner than we did previously. Instead of feeding)
	(back to the same corner, keep track of where we are and start from)
	(there to minimize travel distance)
	
	(We start in the -X, -Y corner)
	#<cxc> = -1
	#<cyc> = -1
	
	
	(Move to start)
	G00 Z[#<_zsafe>]
	X[#<cx> + #<halfX>*#<cxc>] Y[#<cy> + #<halfY>*#<cyc>]
	G01 F[#<_feedz>] Z[#<worktop>]
	
	#<ccd> = [#<worktop> - #<_cutdepth>]
	o<clamp> call [#<ccd>] [#<zlow>] [#<worktop>]
	#<ccd> = #<_value>
	
	(Clear inner area)
	(Traverse shorter dimension ONCE, go back and forth along long dimension)
	(This minimizes direction reversals; both long-short and short-long end up being the same travel distance)
	
	o<rpdepthwhile> while [#<ccd> GE #<zlow>]
		(Go to the start)
		G01 F#<_feedxy> X[#<cx> + #<halfX>*#<cxc>] Y[#<cy> + #<halfY>*#<cyc>]
		
		(Determine direction to ramp in, as well as ramping distance)
		#<rampd> = [4*#<_toolr>]
		o<rampdirif> if [#<w> GE #<h>]
			#<rampdir> = 0
			o<clamp> call [#<rampd>] [0] [#<w> - 2*#<_toolr>]
			#<rampd> = #<_value>
		o<rampdirif> else
			#<rampdir> = 1
			o<clamp> call [#<rampd>] [0] [#<h> - 2*#<_toolr>]
			#<rampd> = #<_value>
		o<rampdirif> endif
		
		(Ramp down)
		o<rampinif> if [#<rampdir> EQ 0]
			G01 F#<_feedxy> X[ [#<cx> + #<halfX>*#<cxc>] + #<rampd>*[-#<cxc>]] Z[#<ccd> + #<_cutdepth>/2]
			X[#<cx> + #<halfX>*#<cxc>] Z#<ccd>
		o<rampinif> else
			G01 F#<_feedxy> Y[ [#<cy> + #<halfY>*#<cyc>] + #<rampd>*[-#<cyc>]] Z[#<ccd> + #<_cutdepth>/2]
			Y[#<cy> + #<halfY>*#<cyc>] Z#<ccd>
		o<rampinif> endif
		
		(Cut around perimeter)
		Y[#<cy> + #<halfY>*[-#<cyc>]]
		X[#<cx> + #<halfX>*[-#<cxc>]]
		Y[#<cy> + #<halfY>*#<cyc>]
		X[#<cx> + #<halfX>*#<cxc>]
		
		(Clear the inside)
		#<longedge> = #<rampdir>
		
		#<done> = 0
		
		(Skip inside clearing if the pocket is small enough in one dimension to)
		(make clearing passes pointless)
		o<doneimmediateif> if [ [#<w> LT 4*#<_toolr>] OR [#<h> LT 4*#<_toolr>] ]
			#<done> = 1
		o<doneimmediateif> endif
		
		(X is long dimension)
		o<rpclearif> if [#<longedge> EQ 0]

			#<cuty> = [[#<cy> + #<halfY>*#<cyc>] + 2*#<_toolr>*#<_stepover>*[-#<cyc>]]
			o<clamp> call [#<cuty>] [#<cy> - #<halfY> + #<_toolr>/2] [#<cy> + #<halfY> - #<_toolr>/2]
			#<cuty> = #<_value>
			#<end> = [[#<cy> + #<halfY>*[-#<cyc>]] - #<_toolr>/2*[-#<cyc>]]
			
			o<rpclearlxwhile> while [#<done> EQ 0]
				G01 F#<_feedxy> Y#<cuty>
				X[#<cx> + [#<halfX> - #<_toolr>/2]*[-#<cxc>]]
				#<cxc> = -#<cxc>
				
				(Done if this pass hit our destination, or we're within the outline previously cut)
				o<lxdoneif> if [ [#<cuty> EQ #<end>] OR [ [#<cuty> - [#<cy> - #<cyc>*#<halfY>]]*#<cyc> LT 2*#<_toolr>*.95 ] ]
					#<done> = 1
				o<lxdoneif> endif
				
				#<cuty> = [#<cuty> + 2*#<_toolr>*#<_stepover>*[-#<cyc>]]
				o<clamp> call [#<cuty>] [#<cy> - #<halfY> + #<_toolr>/2] [#<cy> + #<halfY> - #<_toolr>/2]
				#<cuty> = #<_value>
				
			o<rpclearlxwhile> endwhile
			#<cyc> = -#<cyc>
			
		(Y is long dimension)
		o<rpclearif> else
			#<cutx> = [[#<cx> + #<halfX>*#<cxc>] + 2*#<_toolr>*#<_stepover>*[-#<cxc>]]
			o<clamp> call [#<cutx>] [#<cx> - #<halfX> + #<_toolr>/2] [#<cx> + #<halfX> - #<_toolr>/2]
			#<cutx> = #<_value>
			#<end> = [[#<cx> + #<halfX>*[-#<cxc>]] - #<_toolr>/2*[-#<cxc>]]
			
			o<rpclearlywhile> while [#<done> EQ 0]
				G01 F#<_feedxy> X#<cutx>
				Y[#<cy> + [#<halfY> - #<_toolr>/2]*[-#<cyc>]]
				#<cyc> = -#<cyc>
				
				(Done if this pass hit our destination, or we're within the outline previously cut)
				o<lydoneif> if [ [#<cutx> EQ #<end>] OR [ [#<cutx> - [#<cx> - #<cxc>*#<halfX>]]*#<cxc> LT 2*#<_toolr>*.95 ] ]
					#<done> = 1
				o<lydoneif> endif
				
				#<cutx> = [#<cutx> + 2*#<_toolr>*#<_stepover>*[-#<cxc>]]
				o<clamp> call [#<cutx>] [#<cx> - #<halfX> + #<_toolr>/2] [#<cx> + #<halfX> - #<_toolr>/2]
				#<cutx> = #<_value>
				
			o<rpclearlywhile> endwhile
			#<cxc> = -#<cxc>
		o<rpclearif> endif
	
		(Set next depth)
		o<rpdepthwhiledepth> if [[#<ccd> GT #<zlow>] AND [[#<ccd> - #<_cutdepth>] LT #<zlow>]]
			#<ccd> = [#<zlow>]
		o<rpdepthwhiledepth> elseif [[#<tofinish> GE 1] AND [#<ccd> EQ #<zlow>] AND [#<finishdone> LT #<tofinish>]]
			#<finishdone> = [#<finishdone> + 1]
		o<rpdepthwhiledepth> else
			#<ccd> = [[#<ccd> - #<_cutdepth>]]
		o<rpdepthwhiledepth> endif
	o<rpdepthwhile> endwhile
	
o<rectpocket> endsub

M2
